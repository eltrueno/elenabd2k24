<div class="flex w-full min-w-full px-10 py-2 align-middle items-center" id="topcontainer">
    <div class="text-center w-full text-xl">Velas por soplar: <span id="candlestoblownspan" class="font-semibold"></span></div>
</div>
<div class="cake-container w-full" id="cake"/>
<script>
import * as THREE from 'three'

const cakeRadius = 5
const candleSpeed = 0.1
const blowSpeed = 1.8

const AGE = 24

let candlesCounterCont = 0

let width = window.innerWidth
let height = window.innerHeight


function updateText(){
    var e = document.getElementById("candlestoblownspan")
    .innerText = ""+candlesCounterCont
    if(candlesCounterCont==0){
        happyBirthday();
    }
}

function happyBirthday(){
    window.location.href = 'clue';
}

function getFlameMaterial(isFrontSide){
    let side = isFrontSide ? THREE.FrontSide : THREE.BackSide;
    return new THREE.ShaderMaterial({
      uniforms: {
        time: {value: 0}
      },
      vertexShader: `
        uniform float time;
        varying vec2 vUv;
        varying float hValue;

        //https://thebookofshaders.com/11/
        // 2D Random
        float random (in vec2 st) {
            return fract(sin(dot(st.xy,
                                 vec2(12.9898,78.233)))
                         * 43758.5453123);
        }

        // 2D Noise based on Morgan McGuire @morgan3d
        // https://www.shadertoy.com/view/4dS3Wd
        float noise (in vec2 st) {
            vec2 i = floor(st);
            vec2 f = fract(st);

            // Four corners in 2D of a tile
            float a = random(i);
            float b = random(i + vec2(1.0, 0.0));
            float c = random(i + vec2(0.0, 1.0));
            float d = random(i + vec2(1.0, 1.0));

            // Smooth Interpolation

            // Cubic Hermine Curve.  Same as SmoothStep()
            vec2 u = f*f*(3.0-2.0*f);
            // u = smoothstep(0.,1.,f);

            // Mix 4 coorners percentages
            return mix(a, b, u.x) +
                    (c - a)* u.y * (1.0 - u.x) +
                    (d - b) * u.x * u.y;
        }

        void main() {
          vUv = uv;
          vec3 pos = position;

          pos *= vec3(0.8, 2, 0.725);
          hValue = position.y;
          //float sinT = sin(time * 2.) * 0.5 + 0.5;
          float posXZlen = length(position.xz);

          pos.y *= 1. + (cos((posXZlen + 0.25) * 3.1415926) * 0.25 + noise(vec2(0, time)) * 0.125 + noise(vec2(position.x + time, position.z + time)) * 0.5) * position.y; // flame height

          pos.x += noise(vec2(time * 2., (position.y - time) * 4.0)) * hValue * 0.0312; // flame trembling
          pos.z += noise(vec2((position.y - time) * 4.0, time * 2.)) * hValue * 0.0312; // flame trembling

          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);
        }
      `,
      fragmentShader: `
        varying float hValue;
        varying vec2 vUv;

        // honestly stolen from https://www.shadertoy.com/view/4dsSzr
        vec3 heatmapGradient(float t) {
          return clamp((pow(t, 1.5) * 0.8 + 0.2) * vec3(smoothstep(0.0, 0.35, t) + t * 0.5, smoothstep(0.5, 1.0, t), max(1.0 - t * 1.7, t * 7.0 - 6.0)), 0.0, 1.0);
        }

        void main() {
          float v = abs(smoothstep(0.0, 0.4, hValue) - 1.);
          float alpha = (1. - v) * 0.99; // bottom transparency
          alpha -= 1. - smoothstep(1.0, 0.97, hValue); // tip transparency
          gl_FragColor = vec4(heatmapGradient(smoothstep(0.0, 0.3, hValue)) * vec3(0.95,0.95,0.4), alpha) ;
          gl_FragColor.rgb = mix(vec3(0,0,1), gl_FragColor.rgb, smoothstep(0.0, 0.3, hValue)); // blueish for bottom
          gl_FragColor.rgb += vec3(1, 0.9, 0.5) * (1.25 - vUv.y); // make the midst brighter
          gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.66, 0.32, 0.03), smoothstep(0.95, 1., hValue)); // tip
        }
      `,
      transparent: true,
      side: side
    });
  }

document.addEventListener('DOMContentLoaded', () => {

    //width = document.getElementById('topcontainer').offsetWidth;
    //height = document.getElementById('topcontainer').offsetHeight;

    let clock = new THREE.Clock();
    let time = 0;

    let flameMaterials = [];
    let flameUUIDS = [];

    const scene = new THREE.Scene()

    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)
    camera.position.set(0, cakeRadius * 1.5, cakeRadius * 2.3);
    camera.lookAt(new THREE.Vector3(0, 0, 0));

    const renderer = new THREE.WebGLRenderer({
        antialias: true,
        powerPreference: "high-performance"
    });

    function doZoom(zoomfactor){
        camera.zoom = zoomfactor;
        camera.updateProjectionMatrix();
    }

    if(width<768){
        doZoom(0.6);
    }

    // candlewick
    const candlewickProfile = new THREE.Shape();
    candlewickProfile.absarc(0, 0, 0.0625, 0, Math.PI * 2);

    const candlewickCurve = new THREE.CatmullRomCurve3([
    new THREE.Vector3(0, 0, 0),
    new THREE.Vector3(0, 0.5, -0.0625),
    new THREE.Vector3(0.25, 0.5, 0.125)
    ]);

    const candlewickGeo = new THREE.ExtrudeGeometry(candlewickProfile, {
        steps: 8,
        bevelEnabled: false,
    extrudePath: candlewickCurve
    });


    function createCandleWick(){
        var colors = [];
        var color1 = new THREE.Color("black");
        var color2 = new THREE.Color(0x994411);
        var color3 = new THREE.Color(0xffff44);
        for (let i = 0; i < candlewickGeo.attributes.position.count; i++){
        if (candlewickGeo.attributes.position.getY(i) < 0.4){
            color1.toArray(colors, i * 3);
        }
        else {
            color2.toArray(colors, i * 3);
        };
        if (candlewickGeo.attributes.position.getY(i) < 0.15) color3.toArray(colors, i * 3);
        }
        candlewickGeo.setAttribute( 'color', new THREE.BufferAttribute( new Float32Array(colors), 3 ) );
        //candlewickGeo.addAttribute( 'color', new THREE.BufferAttribute( new Float32Array(colors), 3 ) );
        candlewickGeo.translate(0, 0.95, 0);
        const candlewickMat = new THREE.MeshBasicMaterial({vertexColors: true});

        var candlewickMesh = new THREE.Mesh(candlewickGeo, candlewickMat);

        return candlewickMesh;
    }

    window.addEventListener('resize', () => {
        // update display width and height
        //width = window.innerWidth
        //height = window.innerHeight
        width = document.getElementById('cake').offsetWidth;
        height = document.getElementById('cake').offsetHeight;

        console.log(width)

        // update camera aspect
        camera.aspect = width / height
        camera.updateProjectionMatrix()
        // update renderer
        renderer.setSize(width, height)
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
        renderer.render(scene, camera)
    })


    function animDynLight() {
        
        scene.traverse(function (object) {
            if (object instanceof THREE.PointLight) {
                object.position.x = Math.sin(time * Math.PI) * 0.25;
                object.position.z = Math.cos(time * Math.PI * 0.75) * 0.25;
                object.intensity = 2 + Math.sin(time * Math.PI * 2) * Math.cos(time * Math.PI * 1.5) * 0.25;
                //object.geometry.attributes.position.needsUpdate = true;
            }
        })
        
    }

    let candlesAnimated = []
    function animateCandle(candle, min) {
        if (candle.position.y > min) {
            candle.position.y -= candleSpeed
            return true
        }
        return false
    }

    let candlesBlown = []
    function blowCandle(candle) {
        const flame = candle.children.find(child => flameUUIDS.includes(child.uuid));
        const dynamicFlameLight = candle.children.find(child => child instanceof THREE.PointLight);
       
        dynamicFlameLight.intensity = 1
        dynamicFlameLight.intensity -= blowSpeed
        flame.position.z -= blowSpeed
        flame.material.opacity -= blowSpeed
        if (dynamicFlameLight.intensity <= 0) {
            let disappear = setTimeout(()=>{
                scene.remove(candle);
            }, 2000)
            return false
        }
        return true
    }

    function animate() {
        requestAnimationFrame(animate);
        time += clock.getDelta();

        animDynLight()

        for(var i in flameMaterials){
            var flame = flameMaterials[i];
            try{
                flame.uniforms.time.value = time;
            }catch(err){

            }
        }


        if (candlesAnimated.length > 0) {
            const toRemove = []
            for (let i = 0; i < candlesAnimated.length; i++) {
                const res = animateCandle(candlesAnimated[i][0], candlesAnimated[i][1])
                if (res === false) {
                    toRemove.push(i)
                }
            }

            if (toRemove.length > 0) {
                for (let i = 0; i < toRemove.length; i++) {
                    candlesAnimated.slice(toRemove[i], 1)
                }
            }
        }

        if (candlesBlown.length > 0) {
            const toRemove = []
            for (let i = 0; i < candlesBlown.length; i++) {
                const res = blowCandle(candlesBlown[i])
                if (res === false) {
                    toRemove.push(i)
                }
            }

            if (toRemove.length > 0) {
                for (let i = 0; i < toRemove.length; i++) {
                    candlesBlown.slice(toRemove[i], 1)
                }
            }
        }

        renderer.render(scene, camera);
    }

    function getPastelColor() {
        const base = 200;

        const r = Math.floor(base + Math.random() * (256 - base));
        const g = Math.floor(base + Math.random() * (256 - base));
        const b = Math.floor(base + Math.random() * (256 - base));

        const hexR = r.toString(16).padStart(2, '0');
        const hexG = g.toString(16).padStart(2, '0');
        const hexB = b.toString(16).padStart(2, '0');

        return `#${hexR}${hexG}${hexB}`;
    }



    // flame
    function createFlame(){
        
        let flameGeo = new THREE.SphereGeometry(0.3, 32, 32);
        flameGeo.translate(0, 0.5, 0);
        let flameMat = getFlameMaterial(true);
        flameMaterials.push(flameMat);
        let flame = new THREE.Mesh(flameGeo, flameMat);
        flameUUIDS.push(flame.uuid)
        //flame.position.set(0.06, 1.2, 0.06);
        var rad = (-45*(Math.PI/180));
        flame.rotation.y = rad;
        return flame;

    }


    function createCandle() {
        const candleGeometry = new THREE.CylinderGeometry(0.1, 0.08, 1.5, 12)
        const candleColor = new THREE.Color(getPastelColor())
        const candleMaterial = new THREE.MeshPhongMaterial({
            color: candleColor,
            shininess: 60
        })
        const candle = new THREE.Mesh(candleGeometry, candleMaterial)

        //const particles = createFire(10, 0.3)
        //candle.add(particles);

        //const dynamicFlameLight = new THREE.PointLight(0xff8000, 1.5, 3);
        const dynamicFlameLight = new THREE.PointLight(0xffaa33, 1.5, 5, 2);
        dynamicFlameLight.position.set(0, 1.5, 0);
        candle.add(dynamicFlameLight);
        //particles.dynamicFlameLight = dynamicFlameLight;

        const wick = createCandleWick();
        const flame = createFlame();
        candle.add(dynamicFlameLight)
        candle.add(wick);
        candle.add(flame);

        return candle
    }


    const range = 2.5
    var candlePositions = []
    function getNewCandlePos(){
        const radLimit = cakeRadius - 0.5

        let ang, pos, x, z;

        let okPos = false;
        while(!okPos){
            ang = Math.random() * Math.PI * 2
            pos = Math.random() * radLimit

            x = pos * Math.cos(ang)
            z = pos * Math.sin(ang)

            console.log(candlePositions)
            /*var filteredPos = candlePositions.filter((el) => (x > el.x+range && x < el.x-range) || (z > el.z+range && z < el.z-range) );
            if(filteredPos.length==0){
                okPos = true;
            }
            console.log(filteredPos)
            */
           if(candlePositions.length==0){
                okPos = true
           }else{
            for(var posn in candlePositions){
                let cpos = candlePositions[posn]
                console.log("cpos: "+cpos)
                if((x-cpos.x < range || x-cpos.x < -range) || (z-cpos.z < range || x-cpos.x < -range)){
                    console.log("YESS");
                    okPos = true
                    break;
                }else console.log("NOPE")
            }
           }

            console.log("x: "+x)
            console.log("z: "+z)
            /*for(var posn in candlePositions){
                var cpos = candlePositions[posn];
                
            }*/

        }

        const newPos = {"x": x, "z":z}
        candlePositions.push(newPos)      
        return newPos
    }

    const cakeCont = document.getElementById('cake')
    //const candlesCounterCont = document.getElementById('candles-counter')

    renderer.setSize(window.innerWidth, window.innerHeight);
    cakeCont.appendChild(renderer.domElement);

    var light = new THREE.AmbientLight(0xffffff, 0.1);
    scene.add(light);

    var spotLight = new THREE.SpotLight(0xffffff)
    spotLight.position.set(0, -5, 15)
    spotLight.angle = Math.PI / 6
    spotLight.distance = 30
    spotLight.penumbra = 0.5
    spotLight.decay = 2
    spotLight.castShadow = true
    spotLight.target.position.set(0, 0, 0)
    scene.add(spotLight.target)
    scene.add(spotLight)

    const cakeGeometry = new THREE.CylinderGeometry(cakeRadius, cakeRadius - 0.2, cakeRadius, 32);

    const textureLoader = new THREE.TextureLoader()

    const cakeTopTextureLoader = textureLoader.load('/cake-topper.png')
    const cakeTopMaterial = new THREE.MeshPhongMaterial({
        map: cakeTopTextureLoader
    })
    const cakeBodyTextureLoader = textureLoader.load('/cake-body.png')
    const cakeBodyMaterial = new THREE.MeshPhongMaterial({
        map: cakeBodyTextureLoader
    })
    const cakeBottomTextureLoader = textureLoader.load('/cake-body.png')
    const cakeBottomMaterial = new THREE.MeshPhongMaterial({
        map: cakeBottomTextureLoader
    })

    const cakeMaterials = [
        cakeBodyMaterial,
        cakeTopMaterial,
        cakeBottomMaterial
    ]

    const cake = new THREE.Mesh(cakeGeometry, cakeMaterials)
    scene.add(cake)

    let candlesCounter = AGE;
    let candles = []
    candlesCounterCont = candlesCounter
            updateText();
    for(var i=0; i<candlesCounter; i++){
        setTimeout(()=>{
            const radLimit = cakeRadius - 0.5

            const ang = Math.random() * Math.PI * 2
            const pos = Math.random() * radLimit
            const x = pos * Math.cos(ang)
            const z = pos * Math.sin(ang)



            const newCandle = createCandle()
            const p = getNewCandlePos();
            newCandle.position.set(p.x, cakeRadius + 5, p.z)

            candles.push(newCandle)
            //candlesCounter += 1


            candlesAnimated.push([newCandle, cakeRadius - cakeRadius / 3])

            scene.add(newCandle)
        }, 800)
    }
    /*cakeCont.addEventListener('click', () => {
        const radLimit = cakeRadius - 0.5

        const ang = Math.random() * Math.PI * 2
        const pos = Math.random() * radLimit
        const x = pos * Math.cos(ang)
        const z = pos * Math.sin(ang)



        const newCandle = createCandle()
        newCandle.position.set(x, cakeRadius + 5, z)

        candles.push(newCandle)
        candlesCounter += 1
        candlesCounterCont = candlesCounter

        candlesAnimated.push([newCandle, cakeRadius - cakeRadius / 3])

        scene.add(newCandle)
    })*/

    function extinguishRandomCandles() {
        if (candles.length > 0) {
            for (let i = 0; i < Math.min(3, candles.length); i++) {
                const candleIdx = Math.floor(Math.random() * candles.length)
                const candle = candles[candleIdx]
                extinguishCandle(candle)
                candles.splice(candleIdx, 1)
            }
        }
    }

    function extinguishCandle(candle) {
        candlesCounter -= 1
        candlesCounterCont = candlesCounter
        updateText();
        candlesBlown.push(candle)
    }

    let blowing = null
    if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia){
        navigator.mediaDevices.getUserMedia({ audio: true, video: false })
        .then(function (stream) {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const microphone = audioContext.createMediaStreamSource(stream);
            const analyser = audioContext.createAnalyser();
            analyser.fftSize = 2048;
            microphone.connect(analyser);
            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);

            function detectWindSound() {
                analyser.getByteFrequencyData(dataArray);

                const relevantFrequencies = [100, 200, 300];
                let totalAmplitude = 0;
                for (const freq of relevantFrequencies) {
                    const index = Math.floor(freq / (audioContext.sampleRate / bufferLength));
                    totalAmplitude += dataArray[index];
                }
                const averageAmplitude = totalAmplitude / relevantFrequencies.length;
                if (averageAmplitude > 200) {
                    if (blowing === null) {
                        const maxTime = Math.floor(Math.random() * 500)
                        blowing = setTimeout(() => {
                            extinguishRandomCandles()
                            blowing = null
                        }, maxTime)
                    }
                } else {
                    clearInterval(blowing)
                    blowing = null
                }

                requestAnimationFrame(detectWindSound);
            }
            detectWindSound();
        })
        .catch(function (err) {
            console.log('Error al obtener el acceso al micrófono: ' + err);
        });
    }else console.log('Error al obtener el acceso al micrófono: ');


    animate()
})
</script>